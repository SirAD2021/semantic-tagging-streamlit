from utils.pdf_extractor import extract_text_from_pdf
from utils.abstract_extractor import extract_abstract
from utils.introduction_extractor import extract_introduction
from utils.conclusion_extractor import extract_conclusion
from utils.references_extractor import extract_references
from utils.keyword_extractor import extract_keywords
from utils.text_chunker import get_chunks
from utils.tfidf_tagger import get_tfidf_tags, get_ngram_tfidf_tags
from repositories.data_repository import insert_pdf_tags, update_corrected_tags, check_pdf_exists, delete_pdf_entry
from utils.preliminaries_extractor import extract_preliminaries
from utils.theorem_extractor import extract_theorem
from utils.definition_extractor import extract_definition
from utils.toc_cleaner import remove_table_of_contents
from summarization.summarizer import generate_summary
from transformers import pipeline

summarizer = pipeline("summarization", model="facebook/bart-large-cnn")

def main():
    pdf_path = r'C:\Users\Standard User\OneDrive\Documents\IITJ\MTech\Sem4\VSCode_MTP\pdf_files\boulton2002behaviour-simple-NSA2002-jDIFFERENTIALeq.pdf'
    pdf_name = pdf_path.split("\\")[-1]

    existing_tags = check_pdf_exists(pdf_name)

    if existing_tags:
        unigram_tags, ngram_tags, corrected_tags, extracted_text = existing_tags

        print(f"\nPDF '{pdf_name}' has already been processed before.")

        print("\n--- Unigram Tags generated by model ---")
        print(unigram_tags)

        print("\n--- N-gram Tags generated by model ---")
        print(ngram_tags)

        if corrected_tags:
            print("\n--- User-corrected tags (if any) ---")
            print(corrected_tags)
        else:
            print("\n(No corrected tags found.)")

        print("\nDo you want to delete this entry from the database?")
        print("1. Yes, delete it")
        print("2. No, keep it and continue")

        choice = input("Enter your choice (1/2): ").strip()

        if choice == '1':
            delete_pdf_entry(pdf_name)
            print(f"Entry for '{pdf_name}' deleted successfully.")
            return
        else:
            print(f"Keeping existing entry for '{pdf_name}'.")
    else:
        text = extract_text_from_pdf(pdf_path)
        text = remove_table_of_contents(text)

        abstract_first, abstract_last = extract_abstract(text)
        intro_first, intro_last = extract_introduction(text)
        prelim_first, prelim_last = extract_preliminaries(text)
        theorem_first, theorem_last = extract_theorem(text)
        definition_first, definition_last = extract_definition(text)
        conclusion_first, conclusion_last = extract_conclusion(text)
        references_first, references_last = extract_references(text)

        abstract_chunks = get_chunks("\n".join(abstract_first + abstract_last))
        introduction_chunks = get_chunks("\n".join(intro_first + intro_last))
        conclusion_chunks = get_chunks("\n".join(conclusion_first + conclusion_last))
        references_chunks = get_chunks("\n".join(references_first + references_last))

        all_chunks = abstract_chunks + introduction_chunks + conclusion_chunks + references_chunks

    print("\nWhat do you want to generate?")
    print("1. Semantic Tags (Keyword Extraction)")
    print("2. Summary (Document Summarization)")

    user_choice = input("Enter your choice (1/2): ").strip()

    if user_choice == '1':
        if existing_tags:
            print("\n--- Unigram Tags generated by model ---")
            print(unigram_tags)

            print("\n--- N-gram Tags generated by model ---")
            print(ngram_tags)

            if corrected_tags:
                print("\n--- User-corrected tags (if any) ---")
                print(corrected_tags)
            else:
                print("\n(No corrected tags found.)")
        else:
            tags = get_tfidf_tags(all_chunks, top_n=20)
            print("\n--- Semantic Tags (TF-IDF - Unigrams) ---\n", tags)

            ngram_tags = get_ngram_tfidf_tags(all_chunks, top_n=20)
            print("\n--- Semantic Tags (TF-IDF - Bigrams/Trigrams) ---\n", ngram_tags)

            insert_pdf_tags(pdf_name, tags, ngram_tags, "\n".join(all_chunks))

            print("\nAre the generated tags correct?")
            print("1. Yes, confirm as correct")
            print("2. No, partially correct - I want to edit the tags")
            print("3. No, completely wrong - I want to re-enter all tags")

            feedback = input("Enter your choice (1/2/3): ").strip()

            if feedback == '1':
                print("Tags confirmed as correct.")
            elif feedback == '2':
                print("\nHere are the current tags:")
                print(", ".join(tags))
                print("\nPlease enter the corrected tags, separated by commas:")
                edited = input("Corrected tags: ").strip()
                corrected_tags = [tag.strip() for tag in edited.split(",")]
                update_corrected_tags(pdf_name, corrected_tags)
                print("Corrected tags updated successfully.")
            elif feedback == '3':
                print("\nPlease enter all the correct tags, separated by commas:")
                corrected = input("New tags: ").strip()
                corrected_tags = [tag.strip() for tag in corrected.split(",")]
                update_corrected_tags(pdf_name, corrected_tags)
                print("Corrected tags updated successfully.")
            else:
                print("Invalid input. Assuming tags are correct.")

    elif user_choice == '2':
        if existing_tags:
            full_text = extracted_text
        else:
            full_text = "\n".join(all_chunks)

        summary = generate_summary(full_text, min_length=300, max_length=600)
        print("\n--- Document Summary ---\n")
        print(summary)

    else:
        print("Invalid input. Exiting.")

if __name__ == "__main__":
    main()
